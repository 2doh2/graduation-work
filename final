#include <Servo.h>
#include <IRremote.h>
Servo EduServo;

//자율주행 변수
//출력핀(trig)과 입력핀(echo) 설정
int trigPin = 13;                  // 디지털 13번 핀에 연결
int echoPin = 12;                  // 디지털 12번 핀에 연결
int Ultra_d = 0;

int val = 0;                    // 좌우 경로 설정 변수
   
int RightMotor_E_pin = 5;       // 오른쪽 모터의 Enable & PWM
int LeftMotor_E_pin = 6;        // 왼쪽 모터의 Enable & PWM
int RightMotor_1_pin = 8;       // 오른쪽 모터 제어선 IN1
int RightMotor_2_pin = 9;       // 오른쪽 모터 제어선 IN2
int LeftMotor_3_pin = 10;       // 왼쪽 모터 제어선 IN3
int LeftMotor_4_pin = 11;       // 왼쪽 모터 제어선 IN4

//좌우 모터 속도 조절, 설정 가능 최대 속도 : 255
int L_MotorSpeed = 153; // 왼쪽 모터 속도
int R_MotorSpeed = 153; // 오른쪽 모터 속도


//적외선 리모컨 변수
int R_Motor = 0;
int L_Motor = 0;
int mode = 0;

int RECV_PIN = A0;              // 적외선 수신센서 핀(아날로그 입력 A0)
IRrecv irrecv(RECV_PIN);        // 적외선 송수신 통신을 위한 객체
decode_results IR_Signal;       // 적외선 수신값 해석을 위한 객체

void setup() {  
  EduServo.attach(2);                       // 서보모터 PWM 디지털입출력 2번핀 연결
  
  pinMode(echoPin, INPUT);                  // echoPin 입력
  pinMode(trigPin, OUTPUT);                 // trigPin 출력
  
  pinMode(RightMotor_E_pin, OUTPUT);        // 출력모드로 설정
  pinMode(RightMotor_1_pin, OUTPUT);
  pinMode(RightMotor_2_pin, OUTPUT);
  pinMode(LeftMotor_3_pin, OUTPUT);
  pinMode(LeftMotor_4_pin, OUTPUT);
  pinMode(LeftMotor_E_pin, OUTPUT);

  Serial.begin(9600);                       // PC와의 시리얼 통신 9600bps로 설정
  Serial.println("Welcome Eduino!");

  irrecv.enableIRIn(); // 적외선 통신 수신 시작
}

void loop() { 

  if(irrecv.decode(&IR_Signal)){      // 적외선(IR) 수신값이 있는지 판단.       

    Serial.print("Input Signal : ");
    Serial.print("HEX[ "); Serial.print(IR_Signal.value, HEX); Serial.print(" ], ");
    Serial.print("Int[ "); Serial.print((String)IR_Signal.value); Serial.print(" ] || ");
    
    control_SmartCar((String)IR_Signal.value);

    if(mode == 0){
      motor_role(R_Motor, L_Motor);
    }
    else if(mode == 1){
      Right_role(R_Motor, L_Motor);
    }
    else if(mode == 2){
      Left_role(R_Motor, L_Motor);
    }
    else{
      motor_role(R_Motor, L_Motor);
    }
    
    irrecv.resume();  // 다음 적외선 값 수신   
  }

  else{
  Ultra_d = Ultrasonic();
  Serial.println(Ultra_d);
  motor_role(LOW, LOW);  // 직진

  if(Ultra_d < 250) {
    if (Ultra_d < 150) {
      Serial.println("150 이하.");
      motor_role(HIGH, HIGH); // 후진
      delay(1000);
      analogWrite(RightMotor_E_pin, 0);  
      analogWrite(LeftMotor_E_pin, 0);
      delay(200);
    }
    else {
      analogWrite(RightMotor_E_pin, 0);  
      analogWrite(LeftMotor_E_pin, 0);
      delay(200);
      Serial.println("150 이상.");
      val =  Servo_con();
      if (val == 0) {
        Serial.println("우회전.");
        analogWrite(RightMotor_E_pin, 0);  
        analogWrite(LeftMotor_E_pin, 0);
        delay(500);
        motor_role(HIGH, HIGH);  // 후진
        delay(500);
        motor_role(LOW, HIGH);  // 우회전
        delay(800);
      }
      else if (val == 1) {
        Serial.println("좌회전.");
        analogWrite(RightMotor_E_pin, 0);  
        analogWrite(LeftMotor_E_pin, 0);
        delay(500);
        motor_role(HIGH, HIGH);  // 후진
        delay(500);
        motor_role(HIGH, LOW);  // 좌회전
        delay(800);
      }
    }
  }
  }
}

void control_SmartCar(String Remote_Val){ 
  if( Remote_Val == "16754775" ){      // "+" 버튼, 명령 : 속도 증가
    L_MotorSpeed = L_MotorSpeed + 20;
    L_MotorSpeed = min(L_MotorSpeed, 255);
    R_MotorSpeed = R_MotorSpeed + 20;
    R_MotorSpeed = min(R_MotorSpeed, 255);
    Serial.print("Speed Up : "); 
  }
  
  else if( Remote_Val == "16769055" ){ // "-" 버튼, 명령 : 속도 감소
    L_MotorSpeed = L_MotorSpeed - 20;
    L_MotorSpeed = max(L_MotorSpeed, 50);
    R_MotorSpeed = R_MotorSpeed - 20;
    R_MotorSpeed = max(R_MotorSpeed, 50);
    Serial.print("Speed Down : ");
  }
  
  else if(Remote_Val == "16718055" ){  // "2" 버튼, 명령 : 전진
    R_Motor = HIGH; L_Motor = HIGH; mode = 0;
    Serial.print("Forward : ");
  }  
  
  else if( Remote_Val == "16716015" ){ // "4" 버튼, 명령 : 좌회전
    mode = 2;
    Serial.print("Turn Left : "); 
  }
  
  else if( Remote_Val == "16734885" ){ // "6" 버튼, 명령 : 우회전
    mode = 1;
    Serial.print("Turn Right : "); 
  }
  
  else if( Remote_Val == "16730805" ){ // "8" 버튼, 명령 : 후진
    R_Motor = LOW; L_Motor = LOW; mode = 0;
    Serial.print("Backward : "); 
  }

  else if( Remote_Val == "16726215" ){ // "5" 버튼, 명령 : 정지
    mode = 3;
    Serial.print("Stop : ");  
  }
  
  else{
    Serial.print("Not Defined : ");  // 지정하지 않은 주소입력.
  }
  
  Serial.print("R_Motor[ ");Serial.print(R_Motor);Serial.print(" ], ");
  Serial.print("L_Motor[ ");Serial.print(L_Motor);Serial.print(" ], ");
  Serial.print("L_MotorSpeed[ ");Serial.print(L_MotorSpeed);Serial.print(" ], ");
  Serial.print("R_MotorSpeed[ ");Serial.print(L_MotorSpeed);Serial.print(" ], ");
  Serial.print("Mode[ ");Serial.print(mode);Serial.println(" ]");
}

void motor_role(int R_motor, int L_motor){
   digitalWrite(RightMotor_1_pin, R_motor);
   digitalWrite(RightMotor_2_pin, !R_motor);
   digitalWrite(LeftMotor_3_pin, L_motor);
   digitalWrite(LeftMotor_4_pin, !L_motor);
   
   analogWrite(RightMotor_E_pin, R_MotorSpeed);  // 우측 모터 속도값
   analogWrite(LeftMotor_E_pin, L_MotorSpeed);   // 좌측 모터 속도값  
}

void Right_role(int R_motor, int L_motor){
   digitalWrite(RightMotor_1_pin, R_motor);
   digitalWrite(RightMotor_2_pin, !R_motor);
   digitalWrite(LeftMotor_3_pin, L_motor);
   digitalWrite(LeftMotor_4_pin, !L_motor);
   
   analogWrite(RightMotor_E_pin, max(R_MotorSpeed,50));  // 우측 모터 속도값
   analogWrite(LeftMotor_E_pin, min(L_MotorSpeed,255));   // 좌측 모터 속도값
}

void Left_role(int R_motor, int L_motor){
   digitalWrite(RightMotor_1_pin, R_motor);
   digitalWrite(RightMotor_2_pin, !R_motor);
   digitalWrite(LeftMotor_3_pin, L_motor);
   digitalWrite(LeftMotor_4_pin, !L_motor);
   
   analogWrite(RightMotor_E_pin, min(R_MotorSpeed,255));  // 우측 모터 속도값
   analogWrite(LeftMotor_E_pin, max(L_MotorSpeed,50));   // 좌측 모터 속도값   
}

int Ultrasonic(){
  long duration, distance;
  digitalWrite(trigPin, HIGH);      // trigPin에서 초음파 발생(echoPin도 HIGH)        
  delayMicroseconds(10);
  digitalWrite(trigPin, LOW);
  duration = pulseIn(echoPin, HIGH);   // echoPin 이 HIGH를 유지한 시간을 저장 한다.
  distance = ((float)(340 * duration) / 1000) / 2; 

  //Serial.print("DIstance:");        // 물체와 초음파 센서간 거리를 표시.        
  //Serial.println(distance);

  return distance;
}

int Servo_con(){
  EduServo.write(30);
  delay(300);
  int Ult_30 = Ultrasonic();
  delay(700);
  EduServo.write(150);
  delay(300);
  int Ult_150 = Ultrasonic();
  delay(700);

  if(Ult_30 > Ult_150){
     val = 1;
  }
  else{
     val = 0;
  }
  EduServo.write(90);
  
  return val;
}
